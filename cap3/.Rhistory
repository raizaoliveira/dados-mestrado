C22 <- data.frame(value = Ossecf, variable = "Ossec")
C23 <- data.frame(value = PaceMakerf, variable = "PaceMaker")
C24 <- data.frame(value = PianoBarf, variable = "PianoBar")
C25 <- data.frame(value = SilverSearchf, variable = "SilverSearcher")
C26 <- data.frame(value = Sylpheedf, variable = "Sylpheed")
C27 <- data.frame(value = Syslogf, variable = "Syslog")
C28 <- data.frame(value = totemf, variable = "Totem")
C29 <- data.frame(value = uwsgif, variable = "Uwsgi")
C30 <- data.frame(value = vimf, variable = "Vim")
datafreq <- rbind(C1,C2,C3,C4,C5,C6,C7,C8,C9,C10,C11,C12,C13,C14,C15,C16,C17,C18,C19,C20,C21,C22,C23,C24,C25,C26,C27,C28,C29, C30)
head(datafreq)
allS <- c(vimf, PaceMakerf, LibXMLf,  Lighttpdf,  Collectedf,  Syslogf, ccachef,  gawkf,  Gzipf,  libnfcf,  Libsshf,  librskafkaf,  Mosquittof, MPSolvef,  OpenVPNf,PianoBarf,  SilverSearchf,  GNUPlotf, OpenSCf, diaf, uwsgif,  mapserverf, Hexchatf, ethersexf, m4f,  totemf, gnuchessf,  Curlf,  Sylpheedf)
dataallfreq <- data.frame(value = allS, variable = "Sistemas")
head(dataallfreq)
violinplotALL(datafreq)
violinplotALL <-function(data){
library(ggplot2)
library(scales)
plt_wool <- ggplot(subset(data, value > 0) , aes(x=variable,y=value)) +
geom_violin(aes(fill = variable)) +stat_summary(fun.data="mean_sdl", geom="crossbar", width=0.002 ) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x))) +
theme_gray() + theme(axis.text.x=element_text(face="plain", color="#000000",
size=10, angle=90, vjust=0.2), axis.text.y = element_text(size=12)) +
theme(axis.title=element_text(size=12,face="bold")) +
labs(x = "", y = "Horas") +
annotation_logticks(sides = "rl") +
theme(panel.grid.minor = element_blank()) +
guides(title.hjust=0.5) +
theme(plot.margin=unit(c(0,1,0,0),"mm"))
yp <- subset(data, value>0)             # Choosing only +ve values in col x
sts <- boxplot.stats(yp$value)$stats  # Compute lower and upper whisker limits
p1 = plt_wool + coord_cartesian(ylim = c(sts[2]/100,max(sts)*100.05))
p1
p1+geom_boxplot(width=0.2)
}
violinplotALL(datafreq)
violinplotALL <-function(data){
library(ggplot2)
library(scales)
plt_wool <- ggplot(subset(data, value > 0) , aes(x=variable,y=value)) +
geom_violin(aes(fill = variable)) +stat_summary(fun.data="mean_sdl", geom="crossbar", width=0.002 ) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x))) +
theme_gray() + theme(axis.text.x=element_text(face="plain", color="#000000",
size=10, angle=90, vjust=0.2), axis.text.y = element_text(size=12)) +
theme(axis.title=element_text(size=12,face="bold")) +
labs(x = "", y = "Horas") +
annotation_logticks(sides = "rl") +
theme(panel.grid.minor = element_blank()) +
guides(title.hjust=0.5) +
theme(plot.margin=unit(c(0,1,0,0),"mm"))
yp <- subset(data, value>0)             # Choosing only +ve values in col x
sts <- boxplot.stats(yp$value)$stats  # Compute lower and upper whisker limits
p1 = plt_wool + coord_cartesian(ylim = c(sts[2]/100,max(sts)*100.05))
p1
p1+geom_boxplot(width=0.2)
}
#Load Changes
vimc <- loadChanges_interval("CAP4-FineGrained.xlsx", "Vim")
PaceMakerc <- loadChanges_interval("CAP4-FineGrained.xlsx", "PaceMaker")
LibXMLc <- loadChanges_interval("CAP4-FineGrained.xlsx", "LibXML")
Lighttpdc <- loadChanges_interval("CAP4-FineGrained.xlsx", "Lighttpd")
Collectedc <- loadChanges_interval("CAP4-FineGrained.xlsx", "Collected")
Syslogc <- loadChanges_interval("CAP4-FineGrained.xlsx", "Syslog")
ccachec <- loadChanges_interval("CAP4-FineGrained.xlsx", "ccache")
gawkc <- loadChanges_interval("CAP4-FineGrained.xlsx", "gawk")
Gzipc <- loadChanges_interval("CAP4-FineGrained.xlsx", "Gzip")
libnfcc <- loadChanges_interval("CAP4-FineGrained.xlsx", "libnfc")
Libsshc <- loadChanges_interval("CAP4-FineGrained.xlsx", "Libssh")
librskafkac <- loadChanges_interval("CAP4-FineGrained.xlsx", "librskafka")
Mosquittoc <- loadChanges_interval("CAP4-FineGrained.xlsx", "Mosquitto")
MPSolvec <- loadChanges_interval("CAP4-FineGrained.xlsx", "MPSolve")
OpenVPNc <- loadChanges_interval("CAP4-FineGrained.xlsx", "OpenVPN")
Ossecc <- loadChanges_interval("CAP4-FineGrained.xlsx", "Ossec")
PianoBarc <- loadChanges_interval("CAP4-FineGrained.xlsx", "PianoBar")
SilverSearchc <- loadChanges_interval("CAP4-FineGrained.xlsx", "SilverSearcher")
GNUPlotc <- loadChanges_interval("CAP4-FineGrained.xlsx", "GNUPlot")
OpenSCc <- loadChanges_interval("CAP4-FineGrained.xlsx", "OpenSC")
Sylpheedc <- loadChanges_interval("CAP4-FineGrained.xlsx", "Sylpheed")
Curlc <- loadChanges_interval("CAP4-FineGrained.xlsx", "Curl")
gnuchessc <- loadChanges_interval("CAP4-FineGrained.xlsx", "gnuchess")
totemc <- loadChanges_interval("CAP4-FineGrained.xlsx", "totem")
m4c <- loadChanges_interval("CAP4-FineGrained.xlsx", "m4")
diac <- loadChanges_interval("CAP4-FineGrained.xlsx", "dia")
mapserverc <- loadChanges_interval("CAP4-FineGrained.xlsx", "mapserver")
ethersexc <- loadChanges_interval("CAP4-FineGrained.xlsx", "ethersex")
uwsgic <- loadChanges_interval("CAP4-FineGrained.xlsx", "uwsgi")
Hexchatc <- loadChanges_interval("CAP4-FineGrained.xlsx", "Hexchat")
C1 <- data.frame(value = ccachec, variable = "CCache")
C2 <- data.frame(value = Collectedc, variable = "Collectd")
C3 <- data.frame(value = Curlc, variable = "Curl")
C4 <- data.frame(value = diac, variable = "Dia")
C5 <- data.frame(value = ethersexc, variable = "Ethersex")
C6 <- data.frame(value = gawkc, variable = "Gawk")
C7 <- data.frame(value = gnuchessc, variable = "Gnuchess")
C8 <- data.frame(value = GNUPlotc, variable = "GNUPlot")
C9 <- data.frame(value = Gzipc, variable = "Gzip")
C10 <- data.frame(value = Hexchatc, variable = "Hexchat")
C11 <- data.frame(value = libnfcc, variable = "LibNFC")
C12 <- data.frame(value = librskafkac, variable = "LibrsKakfka")
C13 <- data.frame(value = Libsshc, variable = "LibSSH")
C14 <- data.frame(value = LibXMLc, variable = "LibXML")
C15 <- data.frame(value = Lighttpdc, variable = "Lighttpd")
C16 <- data.frame(value = m4c, variable = "M4")
C17 <- data.frame(value = mapserverc, variable = "MapServer")
C18 <- data.frame(value = Mosquittoc, variable = "Mosquitto")
C19 <- data.frame(value = MPSolvec, variable = "MPSolve")
C20 <- data.frame(value = OpenSCc, variable = "OpenSC")
C21 <- data.frame(value = OpenVPNc, variable = "OpenVPN")
C22 <- data.frame(value = Ossecc, variable = "Ossec")
C23 <- data.frame(value = PaceMakerc, variable = "PaceMaker")
C24 <- data.frame(value = PianoBarc, variable = "PianoBar")
C25 <- data.frame(value = SilverSearchc, variable = "SilverSearcher")
C26 <- data.frame(value = Sylpheedc, variable = "Sylpheed")
C27 <- data.frame(value = Syslogc, variable = "Syslog")
C28 <- data.frame(value = totemc, variable = "Totem")
C29 <- data.frame(value = uwsgic, variable = "Uwsgi")
C30 <- data.frame(value = vimc, variable = "Vim")
datachange <- rbind(C1,C2,C3,C4,C5,C6,C7,C8,C9,C10,C11,C12,C13,C14,C15,C16,C17,C18,C19,C20,C21,C22,C23,C24,C25,C26,C27,C28,C29, C30)
head(datachange)
allS <- c(vimc, PaceMakerc, LibXMLc,  Lighttpdc,  Collectedc,  Syslogc, ccachec,  gawkc,  Gzipc,  libnfcc,  Libsshc,  librskafkac,  Mosquittoc, MPSolvec,  OpenVPNc,PianoBarc,  SilverSearchc,  GNUPlotc, OpenSCc, diac, uwsgic,  mapserverc, Hexchatc, ethersexc, m4c,  totemc, gnuchessc,  Curlc,  Sylpheedc)
dataallchange <- data.frame(value = allS, variable = "Sistemas")
head(dataallchange)
violinplotALL(datachange)
#Load Releases
vimr <- rmvoutlier(freq(releasesdate$vim))
PaceMakerr <- rmvoutlier(freq(releasesdate$pacemaker))
LibXMLr <- rmvoutlier(freq(releasesdate$LibXML))
Lighttpdr <- rmvoutlier(freq(releasesdate$lighttpd))
Collectedr <- rmvoutlier(freq(releasesdate$collectd))
Syslogr <- rmvoutlier(freq(releasesdate$Syslog))
ccacher <- rmvoutlier(freq(releasesdate$ccache))
Gzipr <- rmvoutlier(freq(releasesdate$Gzip))
libnfcr <- rmvoutlier(freq(releasesdate$libnfc))
Libsshr <- rmvoutlier(freq(releasesdate$Libssh))
librskafkar <- rmvoutlier(freq(releasesdate$librdkafka))
Mosquittor <- rmvoutlier(freq(releasesdate$mosquitto))
MPSolver <- rmvoutlier(freq(releasesdate$MPSolve))
OpenVPNr <- rmvoutlier(freq(releasesdate$OpenVPN))
Ossecr <- rmvoutlier(freq(releasesdate$ossec))
PianoBarr <- rmvoutlier(freq(releasesdate$pianobar))
SilverSearchr <- rmvoutlier(freq(releasesdate$silversearch))
GNUPlotr <- rmvoutlier(freq(releasesdate$GNUPlot))
OpenSCr <- rmvoutlier(freq(releasesdate$OpenSC))
Sylpheedr <- rmvoutlier(freq(releasesdate$sylpheed))
Curlr <- rmvoutlier(freq(releasesdate$curl))
totemr <- rmvoutlier(freq(releasesdate$totem))
diar <- rmvoutlier(freq(releasesdate$dia))
mapserverr <- rmvoutlier(freq(releasesdate$mapserver))
uwsgir <- rmvoutlier(freq(releasesdate$uwsgi))
Hexchatr <- rmvoutlier(freq(releasesdate$Hexchat))
C1 <- data.frame(value = vimr, variable = "Vim")
C2 <- data.frame(value = PaceMakerr, variable = "PaceMaker")
C3 <- data.frame(value = LibXMLr, variable = "LibXML")
C4 <- data.frame(value = Lighttpdr, variable = "Lighttpd")
C5 <- data.frame(value = Collectedr, variable = "Collectd")
C6 <- data.frame(value = Syslogr, variable = "Syslog")
C7 <- data.frame(value = ccacher, variable = "CCache")
C9 <- data.frame(value = Gzipr, variable = "Gzip")
C10 <- data.frame(value = libnfcr, variable = "LibNFC")
C11 <- data.frame(value = Libsshr, variable = "LibSSH")
C12 <- data.frame(value = librskafkar, variable = "LibrsKakfka")
C13 <- data.frame(value = Mosquittor, variable = "Mosquitto")
C14 <- data.frame(value = MPSolver, variable = "MPSolve")
C15 <- data.frame(value = OpenVPNr, variable = "OpenVPN")
C16 <- data.frame(value = Ossecr, variable = "Ossec")
C17 <- data.frame(value = PianoBarr, variable = "PianoBar")
C18 <- data.frame(value = SilverSearchr, variable = "SilverSearcher")
C19 <- data.frame(value = GNUPlotr, variable = "GNUPlot")
C20 <- data.frame(value = OpenSCr, variable = "OpenSC")
C21 <- data.frame(value = diar, variable = "Dia")
C22 <- data.frame(value = uwsgir, variable = "Uwsgi")
C23 <- data.frame(value = mapserverr, variable = "MapServer")
C24 <- data.frame(value = Hexchatr, variable = "Hexchat")
C27 <- data.frame(value = totemr, variable = "Totem")
C29 <- data.frame(value = Curlr, variable = "Curl")
C30 <- data.frame(value = Sylpheedr, variable = "Sylpheed")
datarelease <- rbind(C7,C5,C29,C21,C19,C9,C24,C10,C12,C11,C3,C4,C23,C13,C14,C20,C15,C16,C2,C17,C18,C30,C6,C27,C22, C1)
head(datarelease)
allS <- c(vimr ,  PaceMakerr ,  LibXMLr ,  Lighttpdr ,  Collectedr,  Syslogr,  ccacher,  Gzipr ,  libnfcr,  Libsshr ,  librskafkar,  Mosquittor ,  MPSolver ,  OpenVPNr ,  Ossecr ,  PianoBarr ,  SilverSearchr ,  GNUPlotr ,  OpenSCr ,  Sylpheedr ,  Curlr ,  totemr ,  diar ,  mapserverr ,  uwsgir,  Hexchatr)
dataallrelease <- data.frame(value = allS, variable = "Sistemas")
head(dataallrelease)
violinplotALL(datarelease)
violinplotALL <-function(data){
library(ggplot2)
library(scales)
plt_wool <- ggplot(subset(data, value > 0) , aes(x=variable,y=value)) +
geom_violin(aes(fill = variable)) +stat_summary(fun.data="mean_sdl", geom="crossbar", width=0.002 ) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x))) +
theme_gray() + theme(axis.text.x=element_text(face="plain", color="#000000",
size=10, angle=90, vjust=0.2), axis.text.y = element_text(size=12)) +
theme(axis.title=element_text(size=12,face="bold")) +
labs(x = "", y = "Horas") +
annotation_logticks(sides = "rl") +
theme(panel.grid.minor = element_blank()) +
guides(title.hjust=0.5) +
theme(plot.margin=unit(c(0,1,0,0),"mm"))
yp <- subset(data, value>0)             # Choosing only +ve values in col x
sts <- boxplot.stats(yp$value)$stats  # Compute lower and upper whisker limits
p1 = plt_wool + coord_cartesian(ylim = c(sts[2]/50,max(sts)*400.05))
p1
p1+geom_boxplot(width=0.2)
}
violinplotALL(datarelease)
violinplotALL <-function(data){
library(ggplot2)
library(scales)
plt_wool <- ggplot(subset(data, value > 0) , aes(x=variable,y=value)) +
geom_violin(aes(fill = variable)) +stat_summary(fun.data="mean_sdl", geom="crossbar", width=0.002 ) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x))) +
theme_gray() + theme(axis.text.x=element_text(face="plain", color="#000000",
size=10, angle=90, vjust=0.2), axis.text.y = element_text(size=12)) +
theme(axis.title=element_text(size=12,face="bold")) +
labs(x = "", y = "Horas") +
annotation_logticks(sides = "rl") +
theme(panel.grid.minor = element_blank()) +
guides(title.hjust=0.5) +
theme(plot.margin=unit(c(0,1,0,0),"mm"))
yp <- subset(data, value>0)             # Choosing only +ve values in col x
sts <- boxplot.stats(yp$value)$stats  # Compute lower and upper whisker limits
p1 = plt_wool + coord_cartesian(ylim = c(sts[2]/40,max(sts)*400.05))
p1
p1+geom_boxplot(width=0.2)
}
violinplotALL(datarelease)
#Load Releases
vimr <- rmvoutlier(freq(releasesdate$vim))
PaceMakerr <- rmvoutlier(freq(releasesdate$pacemaker))
LibXMLr <- rmvoutlier(freq(releasesdate$LibXML))
Lighttpdr <- rmvoutlier(freq(releasesdate$lighttpd))
Collectedr <- rmvoutlier(freq(releasesdate$collectd))
Syslogr <- rmvoutlier(freq(releasesdate$Syslog))
ccacher <- rmvoutlier(freq(releasesdate$ccache))
Gzipr <- rmvoutlier(freq(releasesdate$Gzip))
libnfcr <- rmvoutlier(freq(releasesdate$libnfc))
Libsshr <- rmvoutlier(freq(releasesdate$Libssh))
librskafkar <- rmvoutlier(freq(releasesdate$librdkafka))
Mosquittor <- rmvoutlier(freq(releasesdate$mosquitto))
MPSolver <- rmvoutlier(freq(releasesdate$MPSolve))
OpenVPNr <- rmvoutlier(freq(releasesdate$OpenVPN))
Ossecr <- rmvoutlier(freq(releasesdate$ossec))
PianoBarr <- rmvoutlier(freq(releasesdate$pianobar))
SilverSearchr <- rmvoutlier(freq(releasesdate$silversearch))
GNUPlotr <- rmvoutlier(freq(releasesdate$GNUPlot))
OpenSCr <- rmvoutlier(freq(releasesdate$OpenSC))
Sylpheedr <- rmvoutlier(freq(releasesdate$sylpheed))
Curlr <- rmvoutlier(freq(releasesdate$curl))
totemr <- rmvoutlier(freq(releasesdate$totem))
diar <- rmvoutlier(freq(releasesdate$dia))
mapserverr <- rmvoutlier(freq(releasesdate$mapserver))
uwsgir <- rmvoutlier(freq(releasesdate$uwsgi))
Hexchatr <- rmvoutlier(freq(releasesdate$Hexchat))
C1 <- data.frame(value = vimr, variable = "Vim")
C2 <- data.frame(value = PaceMakerr, variable = "PaceMaker")
C3 <- data.frame(value = LibXMLr, variable = "LibXML")
C4 <- data.frame(value = Lighttpdr, variable = "Lighttpd")
C5 <- data.frame(value = Collectedr, variable = "Collectd")
C6 <- data.frame(value = Syslogr, variable = "Syslog")
C7 <- data.frame(value = ccacher, variable = "CCache")
C9 <- data.frame(value = Gzipr, variable = "Gzip")
C10 <- data.frame(value = libnfcr, variable = "LibNFC")
C11 <- data.frame(value = Libsshr, variable = "LibSSH")
C12 <- data.frame(value = librskafkar, variable = "LibrsKakfka")
C13 <- data.frame(value = Mosquittor, variable = "Mosquitto")
C14 <- data.frame(value = MPSolver, variable = "MPSolve")
C15 <- data.frame(value = OpenVPNr, variable = "OpenVPN")
C16 <- data.frame(value = Ossecr, variable = "Ossec")
C17 <- data.frame(value = PianoBarr, variable = "PianoBar")
C18 <- data.frame(value = SilverSearchr, variable = "SilverSearcher")
C19 <- data.frame(value = GNUPlotr, variable = "GNUPlot")
C20 <- data.frame(value = OpenSCr, variable = "OpenSC")
C21 <- data.frame(value = diar, variable = "Dia")
C22 <- data.frame(value = uwsgir, variable = "Uwsgi")
C23 <- data.frame(value = mapserverr, variable = "MapServer")
C24 <- data.frame(value = Hexchatr, variable = "Hexchat")
C27 <- data.frame(value = totemr, variable = "Totem")
C29 <- data.frame(value = Curlr, variable = "Curl")
C30 <- data.frame(value = Sylpheedr, variable = "Sylpheed")
datarelease <- rbind(C7,C5,C29,C21,C19,C9,C24,C10,C12,C11,C3,C4,C23,C13,C14,C20,C15,C16,C2,C17,C18,C30,C6,C27,C22, C1)
head(datarelease)
allS <- c(vimr ,  PaceMakerr ,  LibXMLr ,  Lighttpdr ,  Collectedr,  Syslogr,  ccacher,  Gzipr ,  libnfcr,  Libsshr ,  librskafkar,  Mosquittor ,  MPSolver ,  OpenVPNr ,  Ossecr ,  PianoBarr ,  SilverSearchr ,  GNUPlotr ,  OpenSCr ,  Sylpheedr ,  Curlr ,  totemr ,  diar ,  mapserverr ,  uwsgir,  Hexchatr)
dataallrelease <- data.frame(value = allS, variable = "Sistemas")
head(dataallrelease)
violinplotALL(datarelease)
boxplotALL(datarelease)
violinplotALL(datarelease)
View(releasesdate)
ggplot(chartc4rq1scatter, aes(x=deps, y=vari)) + geom_point() + geom_smooth(method = lm, colour="red",size=1)
library(ggplot2)
ggplot(chartc4rq1scatter, aes(x=deps, y=vari)) + geom_point() + geom_smooth(method = lm, colour="red",size=1)
ggplot(chartc4rq1scatter, aes(x=deps, y=vari))+  labs(size= "Nitrogen",
x = "My x label",
y = "My y label",
) + geom_point() + geom_smooth(method = lm, colour="red",size=1)
library(ggplot2)
ggplot(chartc4rq1scatter, aes(x=deps, y=vari))+  labs(size= "Nitrogen",
x = "My x label",
y = "My y label",
) + geom_point() + geom_smooth(method = lm, colour="red",size=1)
ggplot(chartc4rq1scatter, aes(x=deps, y=vari))+  labs(x = "My x label",
y = "My y label",
) + geom_point() + geom_smooth(method = lm, colour="red",size=1)
ggplot(chartc4rq1scatter, aes(x=deps, y=vari)) + geom_point() + geom_smooth(method = lm, colour="red",size=1, fill="blue")
ggplot(chartc4rq1scatter, aes(x=deps, y=vari)) + geom_point() + geom_smooth(method = lm, colour="red",size=1, fill="blue")+xlab("Dose (mg)") + ylab("Teeth length")
ggplot(chartc4rq1scatter, aes(x=deps, y=vari)) + geom_point() + geom_smooth(method = lm, colour="red",size=1, fill="blue")+xlab("Dependências entre variabilidades") + ylab("Variabilidades")
ggplot(chartc4rq1scatter, aes(x=deps, y=vari)) + geom_point() + geom_smooth(method = lm, colour="red",size=1, fill="blue")+xlab("Dependências entre Variabilidades") + ylab("Variabilidades")
summary(c(1,2,3,4,6,10,12,14,20,30))
summary(c(6,7,10,12,23))
summary(c(23,7,12,6,10))
summary(c(1.82,0.52,0.49,0.68,0.14,5.36,0.52,0.12,4.23,0.59,0.69,0.00,0.67,0.12,0.02,0.58,0.42,0.89,0.47,0.27,0.72,0.39,0.76,0.48,0.50,1.88,1.15,0.46,0.44,0.84))
summary(c(2.35,2.29,1.73,1.77,1.54,20.44,2.23,0.92,11.11,5.36,1.85,2.18,1.98,0.92,2.43,2.20,0.99,2.84,3.69,1.37,2.14,1.68,1.24,1.42,2.64,1.25,1.15,1.73,1.09,1.59))
dat <- read.table(text = "Ccache	Collected	Curl	DIA	Ethersex	Gawk	Gnuchess	GNUPlot	Gzip	Hexchat	LibNFC	Librskafka	LibSSH	LibXML	Lighttpd	M4	Mapserver	Mosquitto	Mpsolve	OpenSC	OpenVPN	Ossec	PaceMaker	PianoBar	SilverSearcher	Sylpheed	Syslog	Totem	Uwsgi	Vim
1	91.93	96.69	98.86	91.90	98.84	90.55	91.16	96.31	98.06	93.92	99.30	99.76	89.22	93.86	99.62	98.50	94.24	93.73	94.30	91.93	96.26	98.00	95.02	88.22	98.76	98.77	97.92	95.19	94.12	99.55
2	6.66	2.35	0.97	7.75	0.69	8.51	7.18	3.60	0.93	5.15	0.55	0.07	10.32	5.73	0.16	0.85	5.10	3.11	5.27	7.77	3.55	1.61	4.45	6.43	0.65	0.68	0.74	4.67	5.35	0.27
3	0.77	0.50	0.09	0.22	0.28	0.56	0.78	0.06	0.92	0.52	0.13	0.15	0.25	0.25	0.09	0.31	0.34	1.62	0.27	0.18	0.13	0.26	0.27	2.74	0.38	0.36	0.69	0.08	0.31	0.10
4	0.64	0.46	0.08	0.13	0.19	0.38	0.87	0.03	0.09	0.41	0.02	0.02	0.21	0.16	0.12	0.34	0.31	1.55	0.15	0.12	0.06	0.14	0.26	2.60	0.22	0.19	0.65	0.06	0.22	0.08", header = TRUE)
library(reshape2)
dat$row <- seq_len(nrow(dat))
dat2 <- melt(dat, id.vars = "row")
library(ggplot2)
ggplot(dat2, aes(x = variable, y = value, fill = row)) +
geom_bar(stat = "identity") +
xlab("\nType") +
ylab("Time\n") +
guides(fill = FALSE) +
theme_bw()
dat <- read.table(text = "Ccache	Collected	Curl	DIA	Ethersex	Gawk	Gnuchess	GNUPlot	Gzip	Hexchat	LibNFC	Librskafka	LibSSH	LibXML	Lighttpd	M4	Mapserver	Mosquitto	Mpsolve	OpenSC	OpenVPN	Ossec	PaceMaker	PianoBar	SilverSearcher	Sylpheed	Syslog	Totem	Uwsgi	Vim
1	91.93	96.69	98.86	91.90	98.84	90.55	91.16	96.31	98.06	93.92	99.30	99.76	89.22	93.86	99.62	98.50	94.24	93.73	94.30	91.93	96.26	98.00	95.02	88.22	98.76	98.77	97.92	95.19	94.12	99.55
2	6.66	2.35	0.97	7.75	0.69	8.51	7.18	3.60	0.93	5.15	0.55	0.07	10.32	5.73	0.16	0.85	5.10	3.11	5.27	7.77	3.55	1.61	4.45	6.43	0.65	0.68	0.74	4.67	5.35	0.27
3	0.77	0.50	0.09	0.22	0.28	0.56	0.78	0.06	0.92	0.52	0.13	0.15	0.25	0.25	0.09	0.31	0.34	1.62	0.27	0.18	0.13	0.26	0.27	2.74	0.38	0.36	0.69	0.08	0.31	0.10
4	0.64	0.46	0.08	0.13	0.19	0.38	0.87	0.03	0.09	0.41	0.02	0.02	0.21	0.16	0.12	0.34	0.31	1.55	0.15	0.12	0.06	0.14	0.26	2.60	0.22	0.19	0.65	0.06	0.22	0.08", header = TRUE)
library(reshape2)
dat$row <- seq_len(nrow(dat))
dat2 <- melt(dat, id.vars = "row")
library(ggplot2)
ggplot(dat2, aes(x = variable, y = value, fill = row)) +
geom_bar(stat = "identity") +
xlab("\nType") +
ylab("Time\n") +
guides(fill = FALSE) +
theme_bw() + theme(axis.text.x = element_text(face="bold", color="#993333",
size=14, angle=45),
axis.text.y = element_text(face="bold", color="#993333",
size=14, angle=45))
dat <- read.table(text = "Ccache	Collected	Curl	DIA	Ethersex	Gawk	Gnuchess	GNUPlot	Gzip	Hexchat	LibNFC	Librskafka	LibSSH	LibXML	Lighttpd	M4	Mapserver	Mosquitto	Mpsolve	OpenSC	OpenVPN	Ossec	PaceMaker	PianoBar	SilverSearcher	Sylpheed	Syslog	Totem	Uwsgi	Vim
1	91.93	96.69	98.86	91.90	98.84	90.55	91.16	96.31	98.06	93.92	99.30	99.76	89.22	93.86	99.62	98.50	94.24	93.73	94.30	91.93	96.26	98.00	95.02	88.22	98.76	98.77	97.92	95.19	94.12	99.55
2	6.66	2.35	0.97	7.75	0.69	8.51	7.18	3.60	0.93	5.15	0.55	0.07	10.32	5.73	0.16	0.85	5.10	3.11	5.27	7.77	3.55	1.61	4.45	6.43	0.65	0.68	0.74	4.67	5.35	0.27
3	0.77	0.50	0.09	0.22	0.28	0.56	0.78	0.06	0.92	0.52	0.13	0.15	0.25	0.25	0.09	0.31	0.34	1.62	0.27	0.18	0.13	0.26	0.27	2.74	0.38	0.36	0.69	0.08	0.31	0.10
4	0.64	0.46	0.08	0.13	0.19	0.38	0.87	0.03	0.09	0.41	0.02	0.02	0.21	0.16	0.12	0.34	0.31	1.55	0.15	0.12	0.06	0.14	0.26	2.60	0.22	0.19	0.65	0.06	0.22	0.08", header = TRUE)
library(reshape2)
dat$row <- seq_len(nrow(dat))
dat2 <- melt(dat, id.vars = "row")
library(ggplot2)
ggplot(dat2, aes(x = variable, y = value, fill = row)) +
geom_bar(stat = "identity") +
xlab("\nType") +
ylab("Time\n") +
guides(fill = FALSE) +
theme_bw() + theme(axis.text.x = element_text(face="bold",size=14, angle=90),
axis.text.y = element_text())
dat <- read.table(text = "Ccache	Collected	Curl	DIA	Ethersex	Gawk	Gnuchess	GNUPlot	Gzip	Hexchat	LibNFC	Librskafka	LibSSH	LibXML	Lighttpd	M4	Mapserver	Mosquitto	Mpsolve	OpenSC	OpenVPN	Ossec	PaceMaker	PianoBar	SilverSearcher	Sylpheed	Syslog	Totem	Uwsgi	Vim
1	91.93	96.69	98.86	91.90	98.84	90.55	91.16	96.31	98.06	93.92	99.30	99.76	89.22	93.86	99.62	98.50	94.24	93.73	94.30	91.93	96.26	98.00	95.02	88.22	98.76	98.77	97.92	95.19	94.12	99.55
2	6.66	2.35	0.97	7.75	0.69	8.51	7.18	3.60	0.93	5.15	0.55	0.07	10.32	5.73	0.16	0.85	5.10	3.11	5.27	7.77	3.55	1.61	4.45	6.43	0.65	0.68	0.74	4.67	5.35	0.27
3	0.77	0.50	0.09	0.22	0.28	0.56	0.78	0.06	0.92	0.52	0.13	0.15	0.25	0.25	0.09	0.31	0.34	1.62	0.27	0.18	0.13	0.26	0.27	2.74	0.38	0.36	0.69	0.08	0.31	0.10
4	0.64	0.46	0.08	0.13	0.19	0.38	0.87	0.03	0.09	0.41	0.02	0.02	0.21	0.16	0.12	0.34	0.31	1.55	0.15	0.12	0.06	0.14	0.26	2.60	0.22	0.19	0.65	0.06	0.22	0.08", header = TRUE)
library(reshape2)
dat$row <- seq_len(nrow(dat))
dat2 <- melt(dat, id.vars = "row")
library(ggplot2)
ggplot(dat2, aes(x = variable, y = value, fill = row)) +
geom_bar(stat = "identity") +
xlab("\nType") +
ylab("Time\n") +
guides(fill = FALSE) +
theme_bw() + theme(axis.text.x = element_text(face="bold",size=12, angle=90),
axis.text.y = element_text())
dat <- read.table(text = "Ccache	Collected	Curl	DIA	Ethersex	Gawk	Gnuchess	GNUPlot	Gzip	Hexchat	LibNFC	Librskafka	LibSSH	LibXML	Lighttpd	M4	Mapserver	Mosquitto	Mpsolve	OpenSC	OpenVPN	Ossec	PaceMaker	PianoBar	SilverSearcher	Sylpheed	Syslog	Totem	Uwsgi	Vim
1	91.93	96.69	98.86	91.90	98.84	90.55	91.16	96.31	98.06	93.92	99.30	99.76	89.22	93.86	99.62	98.50	94.24	93.73	94.30	91.93	96.26	98.00	95.02	88.22	98.76	98.77	97.92	95.19	94.12	99.55
2	6.66	2.35	0.97	7.75	0.69	8.51	7.18	3.60	0.93	5.15	0.55	0.07	10.32	5.73	0.16	0.85	5.10	3.11	5.27	7.77	3.55	1.61	4.45	6.43	0.65	0.68	0.74	4.67	5.35	0.27
3	0.77	0.50	0.09	0.22	0.28	0.56	0.78	0.06	0.92	0.52	0.13	0.15	0.25	0.25	0.09	0.31	0.34	1.62	0.27	0.18	0.13	0.26	0.27	2.74	0.38	0.36	0.69	0.08	0.31	0.10
4	0.64	0.46	0.08	0.13	0.19	0.38	0.87	0.03	0.09	0.41	0.02	0.02	0.21	0.16	0.12	0.34	0.31	1.55	0.15	0.12	0.06	0.14	0.26	2.60	0.22	0.19	0.65	0.06	0.22	0.08", header = TRUE)
library(reshape2)
dat$row <- seq_len(nrow(dat))
dat2 <- melt(dat, id.vars = "row")
library(ggplot2)
ggplot(dat2, aes(x = variable, y = value, fill = row)) +
geom_bar(stat = "identity") +
xlab("\nType") +
ylab("Time\n") +
guides(fill = FALSE) +
theme_bw() + theme(axis.text.x = element_text(size=12, angle=90),
axis.text.y = element_text())
dat <- read.table(text = "Ccache	Collected	Curl	DIA	Ethersex	Gawk	Gnuchess	GNUPlot	Gzip	Hexchat	LibNFC	Librskafka	LibSSH	LibXML	Lighttpd	M4	Mapserver	Mosquitto	Mpsolve	OpenSC	OpenVPN	Ossec	PaceMaker	PianoBar	SilverSearcher	Sylpheed	Syslog	Totem	Uwsgi	Vim
1	91.93	96.69	98.86	91.90	98.84	90.55	91.16	96.31	98.06	93.92	99.30	99.76	89.22	93.86	99.62	98.50	94.24	93.73	94.30	91.93	96.26	98.00	95.02	88.22	98.76	98.77	97.92	95.19	94.12	99.55
2	6.66	2.35	0.97	7.75	0.69	8.51	7.18	3.60	0.93	5.15	0.55	0.07	10.32	5.73	0.16	0.85	5.10	3.11	5.27	7.77	3.55	1.61	4.45	6.43	0.65	0.68	0.74	4.67	5.35	0.27
3	0.77	0.50	0.09	0.22	0.28	0.56	0.78	0.06	0.92	0.52	0.13	0.15	0.25	0.25	0.09	0.31	0.34	1.62	0.27	0.18	0.13	0.26	0.27	2.74	0.38	0.36	0.69	0.08	0.31	0.10
4	0.64	0.46	0.08	0.13	0.19	0.38	0.87	0.03	0.09	0.41	0.02	0.02	0.21	0.16	0.12	0.34	0.31	1.55	0.15	0.12	0.06	0.14	0.26	2.60	0.22	0.19	0.65	0.06	0.22	0.08", header = TRUE)
library(reshape2)
dat$row <- seq_len(nrow(dat))
dat2 <- melt(dat, id.vars = "row")
library(ggplot2)
ggplot(dat2, aes(x = variable, y = value, fill = row)) +
geom_bar(stat = "identity") +
xlab("\nType") +
ylab("Time\n") +
guides(fill = FALSE) +
theme_bw() + theme(axis.text.x = element_text(size=10, angle=90),
axis.text.y = element_text())
boxplotALL(datarelease)
library(scales)
boxplotALL(datarelease)
boxplotALL <-function(data){
library(ggplot2)
plt_wool <- ggplot(subset(data, value > 0) , aes(x=variable,y=value)) +
geom_boxplot(aes(color=factor(variable)),outlier.colour = NA) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x))) +
theme_gray() +
theme(axis.text.x=element_text(face="plain", color="#000000",
size=10, angle=90, vjust=0.2), axis.text.y = element_text(size=12)) +
theme(axis.title=element_text(size=12,face="bold")) +
labs(x = "", y = "Intervalo entre commits (minutos)") +
annotation_logticks(sides = "rl") +
theme(panel.grid.minor = element_blank()) +
guides(title.hjust=0.5) +
theme(plot.margin=unit(c(0,1,0,0),"mm"))
yp <- subset(data, value>0)             # Choosing only +ve values in col x
sts <- boxplot.stats(yp$value)$stats  # Compute lower and upper whisker limits
p1 = plt_wool + coord_cartesian(ylim = c(sts[2]/2,max(sts)*200.05))
p1
}
boxplotALL(datarelease)
boxplotALL <-function(data){
library(ggplot2)
plt_wool <- ggplot(subset(data, value > 0) , aes(x=variable,y=value)) +
geom_boxplot(aes(color=factor(variable)),outlier.colour = NA) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x))) +
theme_gray() +
theme(axis.text.x=element_text(face="plain", color="#000000",
size=10, angle=90, vjust=0.2), axis.text.y = element_text(size=12)) +
theme(axis.title=element_text(size=12,face="bold")) +
labs(x = "", y = "Intervalo entre commits (minutos)") +
annotation_logticks(sides = "rl") +
theme(panel.grid.minor = element_blank()) +
guides(title.hjust=0.5) +
theme(plot.margin=unit(c(0,1,0,0),"mm"))
yp <- subset(data, value>0)             # Choosing only +ve values in col x
sts <- boxplot.stats(yp$value)$stats  # Compute lower and upper whisker limits
p1 = plt_wool + coord_cartesian(ylim = c(sts[2]/2,max(sts)*300.05))
p1
}
boxplotALL(datarelease)
boxplotALL(datafreq)
boxplotALL <-function(data){
library(ggplot2)
plt_wool <- ggplot(subset(data, value > 0) , aes(x=variable,y=value)) +
geom_boxplot(aes(color=factor(variable)),outlier.colour = NA) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x))) +
theme_gray() +
theme(axis.text.x=element_text(face="plain", color="#000000",
size=10, angle=90, vjust=0.2), axis.text.y = element_text(size=12)) +
theme(axis.title=element_text(size=12,face="bold")) +
labs(x = "", y = "Intervalo entre commits (minutos)") +
annotation_logticks(sides = "rl") +
theme(panel.grid.minor = element_blank()) +
guides(title.hjust=0.5) +
theme(plot.margin=unit(c(0,1,0,0),"mm"))
yp <- subset(data, value>0)             # Choosing only +ve values in col x
sts <- boxplot.stats(yp$value)$stats  # Compute lower and upper whisker limits
p1 = plt_wool + coord_cartesian(ylim = c(sts[2]/2,max(sts)*20.05))
p1
}
boxplotALL(datafreq)
boxplotALL <-function(data){
library(ggplot2)
plt_wool <- ggplot(subset(data, value > 0) , aes(x=variable,y=value)) +
geom_boxplot(aes(color=factor(variable)),outlier.colour = NA) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x))) +
theme_gray() +
theme(axis.text.x=element_text(face="plain", color="#000000",
size=10, angle=90, vjust=0.2), axis.text.y = element_text(size=12)) +
theme(axis.title=element_text(size=12,face="bold")) +
labs(x = "", y = "Intervalo entre commits (minutos)") +
annotation_logticks(sides = "rl") +
theme(panel.grid.minor = element_blank()) +
guides(title.hjust=0.5) +
theme(plot.margin=unit(c(0,1,0,0),"mm"))
yp <- subset(data, value>0)             # Choosing only +ve values in col x
sts <- boxplot.stats(yp$value)$stats  # Compute lower and upper whisker limits
p1 = plt_wool + coord_cartesian(ylim = c(sts[2]/2,max(sts)*1.05))
p1
}
boxplotALL(datafreq)
boxplotALL <-function(data){
library(ggplot2)
plt_wool <- ggplot(subset(data, value > 0) , aes(x=variable,y=value)) +
geom_boxplot(aes(color=factor(variable)),outlier.colour = NA) +
scale_y_log10(breaks = trans_breaks("log10", function(x) 10^x), labels = trans_format("log10", math_format(10^.x))) +
theme_gray() +
theme(axis.text.x=element_text(face="plain", color="#000000",
size=10, angle=90, vjust=0.2), axis.text.y = element_text(size=12)) +
theme(axis.title=element_text(size=12,face="bold")) +
labs(x = "", y = "Intervalo entre commits (minutos)") +
annotation_logticks(sides = "rl") +
theme(panel.grid.minor = element_blank()) +
guides(title.hjust=0.5) +
theme(plot.margin=unit(c(0,1,0,0),"mm"))
yp <- subset(data, value>0)             # Choosing only +ve values in col x
sts <- boxplot.stats(yp$value)$stats  # Compute lower and upper whisker limits
p1 = plt_wool + coord_cartesian(ylim = c(sts[2]/2,max(sts)*10.05))
p1
}
boxplotALL(datafreq)
boxplotALL(datachange)
