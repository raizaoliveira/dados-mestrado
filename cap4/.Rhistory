library(readxl)
library(readxl)
load_concat_data <- function(arq,ranges){
result <- c()
for (l in 1:length( excel_sheets(arq))){
data_column <- read_excel(arq, sheet=l,na = "", range = (ranges))
result <- c(result,na.omit(data_column[[1]]))
}
return ( result)
}
calc_pechanged <- function(pet, pec){
ipp <- c()
for (i in 1:length(pet)){
if(pet[i] != 0  && pec != 0){
ipp <- c(ipp, pec[i]/pet[i])
}
}
return(ipp)
}
#f/e == variavel
#d/c == funcao
varc <- load_concat_data("CAP4_FineGrained.xlsx","f1:f20000")
vart <- load_concat_data("CAP4_FineGrained.xlsx","e1:e20000")
funcc <- load_concat_data("CAP4_FineGrained.xlsx","d1:d20000")
funct <- load_concat_data("CAP4_FineGrained.xlsx","c1:c20000")
func <- calc_pechanged (funct, funcc)
var <- calc_vip(vart, varc)
wilcox.test(func, var)
var <- calc_pechanged(vart, varc)
calc_pechanged <- function(pet, pec){
ipp <- c()
for (i in 1:length(pet)){
if(pet[i] != 0){
ipp <- c(ipp, pec[i]/pet[i])
}
}
return(ipp)
}
var <- calc_pechanged(vart, varc)
func <- calc_pechanged (funct, funcc)
wilcox.test(func, var)
effect.size()
require(eff.size)
install.packages("effsize")
require(effsize)
cliff.delta(var, func)
library(readxl)
load_concat_data <- function(arq,ranges){
result <- c()
for (l in 1:length( excel_sheets(arq))){
data_column <- read_excel(arq, sheet=l,na = "", range = (ranges))
result <- c(result,na.omit(data_column[[1]]))
}
return ( result)
}
calc_pechanged <- function(pet, pec){
ipp <- c()
for (i in 1:length(pet)){
if(pet[i] != 0){
ipp <- c(ipp, pec[i]/pet[i])
}
}
return(ipp)
}
#f/e == variavel
#d/c == funcao
func_var_wilcoxon <- function(){
varc <- load_concat_data("CAP4_FineGrained.xlsx","f1:f20000")
vart <- load_concat_data("CAP4_FineGrained.xlsx","e1:e20000")
funcc <- load_concat_data("CAP4_FineGrained.xlsx","d1:d20000")
funct <- load_concat_data("CAP4_FineGrained.xlsx","c1:c20000")
func <- calc_pechanged (funct, funcc)
var <- calc_pechanged(vart, varc)
wilcox.test(func, var)
cliff.delta(var, func)
}
cat_kruskal <- function(){
Fadd <- load_concat_data("CAP4_FineGrained.xlsx","g1:g20000")
Frmv <- load_concat_data("CAP4_FineGrained.xlsx","i1:i20000")
FRet <- load_concat_data("CAP4_FineGrained.xlsx","o1:o20000")
FMod <- load_concat_data("CAP4_FineGrained.xlsx","p1:p20000")
FSpe <- load_concat_data("CAP4_FineGrained.xlsx","q1:q20000")
FQua <- load_concat_data("CAP4_FineGrained.xlsx","r1:r20000")
FPar <- load_concat_data("CAP4_FineGrained.xlsx","s1:s20000")
Vadd <- load_concat_data("CAP4_FineGrained.xlsx","h1:h20000")
Vrmv <- load_concat_data("CAP4_FineGrained.xlsx","j1:j20000")
VMod <- load_concat_data("CAP4_FineGrained.xlsx","k1:k20000")
VSpe <- load_concat_data("CAP4_FineGrained.xlsx","l1:l20000")
VQua <- load_concat_data("CAP4_FineGrained.xlsx","m1:m20000")
Vtyp <- load_concat_data("CAP4_FineGrained.xlsx","n1:n20000")
kruskal.test(Vadd, Vrmv, VMod, VSpe, VQua, Vtyp)
kruskal.test(Fadd, Frmv, FMod, FSpe, FQua, FRet, FPar)
#cliff.delta(var, func)
}
cat_kruskal()
library(readxl)
load_concat_data <- function(arq,ranges){
result <- c()
for (l in 1:length( excel_sheets(arq))){
data_column <- read_excel(arq, sheet=l,na = "", range = (ranges))
result <- c(result,na.omit(data_column[[1]]))
}
return ( result)
}
calc_pechanged <- function(pet, pec){
ipp <- c()
for (i in 1:length(pet)){
if(pet[i] != 0){
ipp <- c(ipp, pec[i]/pet[i])
}
}
return(ipp)
}
#f/e == variavel
#d/c == funcao
func_var_wilcoxon <- function(){
varc <- load_concat_data("CAP4_FineGrained.xlsx","f1:f20000")
vart <- load_concat_data("CAP4_FineGrained.xlsx","e1:e20000")
funcc <- load_concat_data("CAP4_FineGrained.xlsx","d1:d20000")
funct <- load_concat_data("CAP4_FineGrained.xlsx","c1:c20000")
func <- calc_pechanged (funct, funcc)
var <- calc_pechanged(vart, varc)
wilcox.test(func, var)
cliff.delta(var, func)
}
#cat_kruskal <- function(){
Fadd <- load_concat_data("CAP4_FineGrained.xlsx","g1:g20000")
Frmv <- load_concat_data("CAP4_FineGrained.xlsx","i1:i20000")
FRet <- load_concat_data("CAP4_FineGrained.xlsx","o1:o20000")
FMod <- load_concat_data("CAP4_FineGrained.xlsx","p1:p20000")
FSpe <- load_concat_data("CAP4_FineGrained.xlsx","q1:q20000")
FQua <- load_concat_data("CAP4_FineGrained.xlsx","r1:r20000")
FPar <- load_concat_data("CAP4_FineGrained.xlsx","s1:s20000")
Vadd <- load_concat_data("CAP4_FineGrained.xlsx","h1:h20000")
Vrmv <- load_concat_data("CAP4_FineGrained.xlsx","j1:j20000")
VMod <- load_concat_data("CAP4_FineGrained.xlsx","k1:k20000")
VSpe <- load_concat_data("CAP4_FineGrained.xlsx","l1:l20000")
VQua <- load_concat_data("CAP4_FineGrained.xlsx","m1:m20000")
Vtyp <- load_concat_data("CAP4_FineGrained.xlsx","n1:n20000")
kruskal.test(Vadd, Vrmv, VMod, VSpe, VQua, Vtyp)
kruskal.test(Fadd, Frmv, FMod, FSpe, FQua, FRet, FPar)
#cliff.delta(var, func)
#}
kruskal.test(list(Vadd, Vrmv, VMod, VSpe, VQua, Vtyp))
kruskal.test(list(Fadd, Frmv, FMod, FSpe, FQua, FRet, FPar))
boxplot(Vadd, Vrmv)
boxplot(Vadd, Vrmv, VMod, VSpe, VQua, Vtyp)
boxplot(Vadd, Vrmv, VMod, VSpe, VQua, Vtyp, outline=FALSE)
remove_zero <- function(data){
ip <- c()
for (i in 1:length(data)){
if(data[i] != 0){
ip <- c(ip, data[i])
}
}
return(ip)
}
boxplot(Vadd, Vrmv,outline=FALSE)
boxplot(remove_zero(Vadd), remove_zero(Vrmv),outline=FALSE)
boxplot(remove_zero(Vadd), remove_zero(Vrmv), remove_zero(Vmod), remove_zero(VSpe), remove_zero(VQua), remove_zero(VTyp),outline=FALSE)
boxplot(remove_zero(Vadd), remove_zero(Vrmv), remove_zero(VMod), remove_zero(VSpe), remove_zero(VQua), remove_zero(VTyp),outline=FALSE)
boxplot(remove_zero(Vadd), remove_zero(Vrmv), remove_zero(VMod), remove_zero(VSpe), remove_zero(VQua), remove_zero(Vtyp),outline=FALSE)
boxplot(remove_zero(Vadd), remove_zero(Vrmv), remove_zero(VMod), remove_zero(VSpe), remove_zero(VQua), remove_zero(Vtyp),outline=FALSE, names <- c("Inclusão", "Exclusão", "Modificador", "Especificador", "Qualificador", "Tipo"))
boxplot(remove_zero(Vadd), remove_zero(Vrmv), remove_zero(VMod), remove_zero(VSpe), remove_zero(VQua), remove_zero(Vtyp),outline=FALSE, names=c("Inclusão", "Exclusão", "Modificador", "Especificador", "Qualificador", "Tipo"))
kruskal.test(list(Vadd, Vrmv, VMod, VSpe, VQua, Vtyp))
kruskal.test(list(remove_zero(Vadd), remove_zero(Vrmv), remove_zero(VMod), remove_zero(VSpe), remove_zero(VQua), remove_zero(Vtyp)))
boxplot(remove_zero(Fadd), remove_zero(Frmv), remove_zero(FMod), remove_zero(FSpe), remove_zero(FQua), remove_zero(FRet), remove_zero(FPar), outline=FALSE, names=c("Inclusão", "Exclusão", "Modificador", "Especificador", "Qualificador", "Tipo", "Parametro"))
wilcox.test(Vadd, Vrmv)
wilcox.test(Vadd, Vtyp)
wilcox.test(Vadd, VQua)
wilcox.test(Vadd, VMod)
wilcox.test(Vadd, VSpe)
wilcox.test(Vrmv, Vtyp)
wilcox.test(Vrmv, VQua)
wilcox.test(Vrmv, VMod)
wilcox.test(Vrmv, VSpe)
wilcox.test(Vtyp, VSpe)
wilcox.test(Vtyp, VQua)
wilcox.test(Vtyp, VMod)
wilcox.test(VQua, VSpe)
wilcox.test(VQua, VMod)
wilcox.test(VSpe, VMod)
wilcox.test(Fadd, Frmv)
cliff.delta(Fadd, Frmv)
wilcox.test(Fadd, FRet)
wilcox.test(Fadd, FQua)
wilcox.test(Fadd, FSpe)
wilcox.test(Fadd, FMod)
wilcox.test(Fadd, FPar)
wilcox.test(Frmv, FRet)
wilcox.test(Frmv, FQua)
wilcox.test(Frmv, FSpe)
wilcox.test(Frmv, FMod)
wilcox.test(Frmv, FPar)
wilcox.test(FRet, FPar)
wilcox.test(FRet, FMod)
wilcox.test(FRet, FQua)
wilcox.test(FRet, FSpe)
wilcox.test(FQua, FSpe)
wilcox.test(FQua, FMod)
wilcox.test(FQua, FPar)
wilcox.test(FSpe, FPar)
wilcox.test(FSpe, FMod)
wilcox.test(FPar, FMod)
wilcox.test(Fadd, Frmv)
wilcox.test(remove_zero(Fadd), remove_zero(Frmv))
wilcox.test(remove_zero(Fadd), remove_zero(FRet))
wilcox.test(remove_zero(Fadd), remove_zero(FQua))
wilcox.test(remove_zero(Fadd), remove_zero(FMod))
wilcox.test(remove_zero(Fadd), remove_zero(FPar))
wilcox.test(remove_zero(Frmv), remove_zero(FSpe))
wilcox.test(remove_zero(Frmv), remove_zero(FRet))
wilcox.test(remove_zero(FRet), remove_zero(FQua))
wilcox.test(remove_zero(FRet), remove_zero(FMod))
wilcox.test(remove_zero(FRet), remove_zero(FPar))
wilcox.test(remove_zero(FRet), remove_zero(FSpe))
wilcox.test(remove_zero(FQua), remove_zero(FSpe))
wilcox.test(remove_zero(FQua), remove_zero(FMod))
wilcox.test(remove_zero(FQua), remove_zero(FPar))
remove_zero <- function(data){
ip <- c()
cont = 0
print(length(data))
for (i in 1:length(data)){
if(data[i] != 0){
ip <- c(ip, data[i])
cont <- cont+1
}
}
print(cont)
return(ip)
}
remove_zero(Vadd)
remove_zero(varc)
remove_zero(Vrmv)
cont = 0
for (i in 1:length(varc)){
if(Vadd[i] != 0 || Vrmv[i] != 0){
cont <- cont+1
}
}
print(cont)
cont = 0
for (i in 1:length(varc)){
if(Vadd[i] != 0 && Vrmv[i] == 0){
cont <- cont+1
}
}
print(cont)
cont = 0
for (i in 1:length(varc)){
if(Vadd[i] == 0 && Vrmv[i] != 0){
cont <- cont+1
}
}
print(cont)
cont = 0
for (i in 1:length(varc)){
if(Vadd[i] != 0 && Vrmv[i] != 0){
cont <- cont+1
}
}
print(cont)
cont = 0
for (i in 1:length(varc)){
if(Vadd[i] == 0 && Vrmv[i] == 0){
cont <- cont+1
}
}
print(cont)
print(length(remove_zero(varc)))
cont = 0
for (i in 1:length(remove_zero(varc))){
if(Vadd[i] == 0 && Vrmv[i] == 0){
cont <- cont+1
}
}
print(cont)
cont = 0
for (i in 1:length(remove_zero(varc))){
if(Vadd[i] == 0 && Vrmv[i] == 0){
cont <- cont+1
}
}
print(cont)
cont = 0
for (i in 1:length(func)){
if(Fadd[i] != 0 || Frmv[i] != 0){
cont <- cont+1
}
}
print(cont)
cont = 0
for (i in 1:length(func)){
if(Fadd[i] != 0 && Frmv[i] == 0){
cont <- cont+1
}
}
print(cont)
cont = 0
for (i in 1:length(func)){
if(Fadd[i] == 0 && Frmv[i] != 0){
cont <- cont+1
}
}
print(cont)
cont = 0
for (i in 1:length(func)){
if(Fadd[i] != 0 && Frmv[i] != 0){
cont <- cont+1
}
}
print(cont)
remove_zero(func)
remove_zero(varc)
cont = 0
for (i in 1:length(func)){
if(FPar[i] != 0){
cont <- cont+1
}
}
print(cont)
